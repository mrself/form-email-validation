(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
window.EmailValiditon = require('../index.js');
},{"../index.js":2}],2:[function(require,module,exports){
(function (global){
function EmailValiditon() {
	/**
	 * Form containing $field
	 * @type {jQuery|undefined}
	 */
	this.$form = undefined;

	/**
	 * Email field
	 * @type {jQuery|undefined}
	 */
	this.$field = undefined;

	/**
	 * If plugin was inited on $field
	 * @type {Boolean}
	 */
	this.isInited = false;

	/**
	 * If form could be proceeded
	 * @type {Boolean}
	 */
	this.formEnabled = true;

	/**
	 * Current email
	 * @type {string}
	 */
	this.value = undefined;

	/**
	 * Last validated email
	 * @type {string}
	 */
	this.previousValue = undefined;
}

EmailValiditon.prototype = {
	constructor: EmailValiditon,

	init: function() {
		if (this.isInited || !this.defineForm() || !this.defineSubmitBtn()) return;
		this.setEvents();
		this.dName = this.options.dName;
		this.$field.addClass(this.dName);
		this.setIsInited();
	},

	/**
	 * Set that a plugin is fully inited.
	 */
	setIsInited: function() {
		this.isInited = true;
		this.$field.addClass(this.dName + '--inited');
	},

	/**
	 * Define and set $sbmit in $form
	 * @return {boolean} If $submit exists
	 */
	defineSubmitBtn: function() {
		this.$submit = this.$form.find('[type="submit"]');
		return !!this.$submit.length;
	},

	/**
	 * Define and set $form
	 * @return {boolean} If $form exists
	 */
	defineForm: function() {
		this.$form = this.$field.closest('form');
		return !!this.$form.length;
	},

	setEvents: function() {
		if (~this.options.triggerType.indexOf('focusout'))
			this.initBlurTrigger();
		this.$form.on('submit', this.onSubmit.bind(this));
	},

	initBlurTrigger: function() {
		var timeoutFlag, self = this;
		this.$field.on('blur', function() {
			timeoutFlag = setTimeout(self.run.bind(self), self.options.focusoutDelay);
		}).on('focus', function() {
			clearTimeout(timeoutFlag);
		});
	},

	/**
	 * Called on form submit.
	 * Prevent default form proceeding if an email is invalid
	 * @return {boolean|void}
	 */
	onSubmit: function() {
		if (!this.isStateSetted()) this.run();
		if (!this.formEnabled)
			return false;
	},

	/**
	 * If state was given any value. 
	 * Return 'false' only if user submit form without focus the $field
	 * @return {Boolean}
	 */
	isStateSetted: function() {
		return 'state' in this;
	},

	/**
	 * Execute pre-validation, validation and post-validtion things
	 */
	run: function() {
		if (!this.isValueChanged()) return;
		if (this.isHashed())
			return this.setHashedState();
		var self = this;
		this.state = EmailValiditon.STATES.PENDING;
		this.validate(this.value).done(function(result) {
			EmailValiditon.setHash(self.value, result);
			self.setState(result);
		});
	},

	/**
	 * Set hashed value of state
	 */
	setHashedState: function() {
		var hashed = EmailValiditon.getHash(this.value);
		this.setState(hashed);
	},

	/**
	 * If validation of valued was hashed
	 * @return {Boolean}
	 */
	isHashed: function() {
		return this.options.hash && EmailValiditon.hasHash(this.value);
	},

	isValueChanged: function() {
		this.value = this.$field.val();
		if (this.previousValue == this.value) return false;
		this.previousValue = this.value;
		return true;
	},

	/**
	 * Set state
	 * @param {boolean|null|undefined} state 
	 */
	setState: function(state) {
		if (state === EmailValiditon.STATES.INVALID) {
			this.setInValid();
		} else if (state === EmailValiditon.STATES.VALID || 
			state === EmailValiditon.STATES.UNDEFINED)
			this.setValid();
		else if (state == EmailValiditon.STATES.UNDEFINED)
			this.reset();
		else {
			state = EmailValiditon.STATES.UNDEFINED;
			this.state = state;
			throw new Error('Not allowed value of state');
		}
	},

	/**
	 * Reset form and field to default value as they were before plugin init
	 */
	reset: function() {
		this.formEnabled = true;
		this.$submit.removeClass(this.dName + 'Submit--disabled').prop('disabled', false);
		this.$field
			.removeClass(this.dName + '--valid')
			.removeClass(this.dName + '--invalid');
	},

	/**
	 * Called when email is invalid.
	 * Disable form. Mark field as invalid
	 */
	setInValid: function() {
		this.formEnabled = false;
		this.$submit.addClass(this.dName + 'Submit--disabled').prop('disabled', true);
		this.$field
			.removeClass(this.dName + '--valid')
			.addClass(this.dName + '--invalid');
	},

	/**
	 * Called when email is valid.
	 * Enable form. Mark field as valid
	 */
	setValid: function() {
		this.formEnabled = true;
		this.$submit.removeClass(this.dName + 'Submit--disabled').prop('disabled', false);
		this.$field.removeClass(this.dName + '--invalid').addClass(this.dName + '--valid');
	},

	/**
	 * Validate email
	 * @param  {string} email Email to validate
	 * @return {jQuery.Deferred} Deferred instance, which is resolved with a state
	 */
	validate: function(email) {
		var result = this.validateRegExp(email);
		if (result && this.options.remoteValidate)
			return this.options.remoteValidate(email);
		var def = $.Deferred();
		def.resolve(result);
		return def;
	},

	/**
	 * Validate an email with regular expression
	 * @param  {string} email Email to validate
	 * @return {boolean}      Result of validation
	 */
	validateRegExp: function(email) {
		return this.options.validationReg.test(email);
	},

	/**
	 * Set options, extending existing
	 * @param {Object} options New options
	 */
	setOptions: function(options) {
		this.options = $.extend(true, this.options, EmailValiditon.options, options);
		this.options.triggerType = [].concat(this.options.triggerType);
	},
};

EmailValiditon.STATES = {
	// State can not be detected. It happens when #remoteValidation produces an error
	UNDEFINED: undefined,
	// State is valid
	VALID: true,
	// State is invalid
	INVALID: false,
	PENDING: null
};

/**
 * Init plugin on $field with options
 * @param  {jQuery} $field  Email field
 * @param  {Object} [options] Options
 * @return {EmailValiditon]   Instance
 */
EmailValiditon.initField = function($field, options) {
	var inst = new this;
	inst.$field = $field;
	inst.setOptions(options);
	inst.init();
	return inst;
};

/**
 * Init plugin on document name (class name) with options
 * @param  {string} dName   
 * @param  {object} [options] 
 */
EmailValiditon.initSelector = function(dName, options) {
	options = options || {};
	options.dName = dName;
	$('.' + dName).each(function() {
		var inst = new EmailValiditon;
		inst.$field = $(this);
		inst.setOptions(options);
		inst.init();
	});
};

EmailValiditon.options = {
	dName: 'femm',
	validationReg: /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/i,
	triggerType: ['submit', 'focusout'/*,'keyup'*/],
	remoteValidate: false,
	// Used only when `triggerType` contains 'focusout'
	focusoutDelay: 400,
	hash: true
};
EmailValiditon.setOptions = function(options) {
	this.options = $.extend(true, this.options, options);
};

EmailValiditon.hash = {};
EmailValiditon.getHash = function(key) {
	return this.hash[key];
};
EmailValiditon.setHash = function(key, value) {
	this.hash[key] = value;
};
EmailValiditon.hasHash = function(key) {
	return key in this.hash;
};
EmailValiditon.clearHash = function() {
	this.hash = {};
};

module.exports = EmailValiditon;

global.l = function (x) {
	console.log(x);
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJicm93c2VyLXRlc3QvaW5kZXguanMiLCJpbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBOzs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIndpbmRvdy5FbWFpbFZhbGlkaXRvbiA9IHJlcXVpcmUoJy4uL2luZGV4LmpzJyk7IiwiZnVuY3Rpb24gRW1haWxWYWxpZGl0b24oKSB7XHJcblx0LyoqXHJcblx0ICogRm9ybSBjb250YWluaW5nICRmaWVsZFxyXG5cdCAqIEB0eXBlIHtqUXVlcnl8dW5kZWZpbmVkfVxyXG5cdCAqL1xyXG5cdHRoaXMuJGZvcm0gPSB1bmRlZmluZWQ7XHJcblxyXG5cdC8qKlxyXG5cdCAqIEVtYWlsIGZpZWxkXHJcblx0ICogQHR5cGUge2pRdWVyeXx1bmRlZmluZWR9XHJcblx0ICovXHJcblx0dGhpcy4kZmllbGQgPSB1bmRlZmluZWQ7XHJcblxyXG5cdC8qKlxyXG5cdCAqIElmIHBsdWdpbiB3YXMgaW5pdGVkIG9uICRmaWVsZFxyXG5cdCAqIEB0eXBlIHtCb29sZWFufVxyXG5cdCAqL1xyXG5cdHRoaXMuaXNJbml0ZWQgPSBmYWxzZTtcclxuXHJcblx0LyoqXHJcblx0ICogSWYgZm9ybSBjb3VsZCBiZSBwcm9jZWVkZWRcclxuXHQgKiBAdHlwZSB7Qm9vbGVhbn1cclxuXHQgKi9cclxuXHR0aGlzLmZvcm1FbmFibGVkID0gdHJ1ZTtcclxuXHJcblx0LyoqXHJcblx0ICogQ3VycmVudCBlbWFpbFxyXG5cdCAqIEB0eXBlIHtzdHJpbmd9XHJcblx0ICovXHJcblx0dGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcclxuXHJcblx0LyoqXHJcblx0ICogTGFzdCB2YWxpZGF0ZWQgZW1haWxcclxuXHQgKiBAdHlwZSB7c3RyaW5nfVxyXG5cdCAqL1xyXG5cdHRoaXMucHJldmlvdXNWYWx1ZSA9IHVuZGVmaW5lZDtcclxufVxyXG5cclxuRW1haWxWYWxpZGl0b24ucHJvdG90eXBlID0ge1xyXG5cdGNvbnN0cnVjdG9yOiBFbWFpbFZhbGlkaXRvbixcclxuXHJcblx0aW5pdDogZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAodGhpcy5pc0luaXRlZCB8fCAhdGhpcy5kZWZpbmVGb3JtKCkgfHwgIXRoaXMuZGVmaW5lU3VibWl0QnRuKCkpIHJldHVybjtcclxuXHRcdHRoaXMuc2V0RXZlbnRzKCk7XHJcblx0XHR0aGlzLmROYW1lID0gdGhpcy5vcHRpb25zLmROYW1lO1xyXG5cdFx0dGhpcy4kZmllbGQuYWRkQ2xhc3ModGhpcy5kTmFtZSk7XHJcblx0XHR0aGlzLnNldElzSW5pdGVkKCk7XHJcblx0fSxcclxuXHJcblx0LyoqXHJcblx0ICogU2V0IHRoYXQgYSBwbHVnaW4gaXMgZnVsbHkgaW5pdGVkLlxyXG5cdCAqL1xyXG5cdHNldElzSW5pdGVkOiBmdW5jdGlvbigpIHtcclxuXHRcdHRoaXMuaXNJbml0ZWQgPSB0cnVlO1xyXG5cdFx0dGhpcy4kZmllbGQuYWRkQ2xhc3ModGhpcy5kTmFtZSArICctLWluaXRlZCcpO1xyXG5cdH0sXHJcblxyXG5cdC8qKlxyXG5cdCAqIERlZmluZSBhbmQgc2V0ICRzYm1pdCBpbiAkZm9ybVxyXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IElmICRzdWJtaXQgZXhpc3RzXHJcblx0ICovXHJcblx0ZGVmaW5lU3VibWl0QnRuOiBmdW5jdGlvbigpIHtcclxuXHRcdHRoaXMuJHN1Ym1pdCA9IHRoaXMuJGZvcm0uZmluZCgnW3R5cGU9XCJzdWJtaXRcIl0nKTtcclxuXHRcdHJldHVybiAhIXRoaXMuJHN1Ym1pdC5sZW5ndGg7XHJcblx0fSxcclxuXHJcblx0LyoqXHJcblx0ICogRGVmaW5lIGFuZCBzZXQgJGZvcm1cclxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBJZiAkZm9ybSBleGlzdHNcclxuXHQgKi9cclxuXHRkZWZpbmVGb3JtOiBmdW5jdGlvbigpIHtcclxuXHRcdHRoaXMuJGZvcm0gPSB0aGlzLiRmaWVsZC5jbG9zZXN0KCdmb3JtJyk7XHJcblx0XHRyZXR1cm4gISF0aGlzLiRmb3JtLmxlbmd0aDtcclxuXHR9LFxyXG5cclxuXHRzZXRFdmVudHM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYgKH50aGlzLm9wdGlvbnMudHJpZ2dlclR5cGUuaW5kZXhPZignZm9jdXNvdXQnKSlcclxuXHRcdFx0dGhpcy5pbml0Qmx1clRyaWdnZXIoKTtcclxuXHRcdHRoaXMuJGZvcm0ub24oJ3N1Ym1pdCcsIHRoaXMub25TdWJtaXQuYmluZCh0aGlzKSk7XHJcblx0fSxcclxuXHJcblx0aW5pdEJsdXJUcmlnZ2VyOiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciB0aW1lb3V0RmxhZywgc2VsZiA9IHRoaXM7XHJcblx0XHR0aGlzLiRmaWVsZC5vbignYmx1cicsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR0aW1lb3V0RmxhZyA9IHNldFRpbWVvdXQoc2VsZi5ydW4uYmluZChzZWxmKSwgc2VsZi5vcHRpb25zLmZvY3Vzb3V0RGVsYXkpO1xyXG5cdFx0fSkub24oJ2ZvY3VzJywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdGNsZWFyVGltZW91dCh0aW1lb3V0RmxhZyk7XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cclxuXHQvKipcclxuXHQgKiBDYWxsZWQgb24gZm9ybSBzdWJtaXQuXHJcblx0ICogUHJldmVudCBkZWZhdWx0IGZvcm0gcHJvY2VlZGluZyBpZiBhbiBlbWFpbCBpcyBpbnZhbGlkXHJcblx0ICogQHJldHVybiB7Ym9vbGVhbnx2b2lkfVxyXG5cdCAqL1xyXG5cdG9uU3VibWl0OiBmdW5jdGlvbigpIHtcclxuXHRcdGlmICghdGhpcy5pc1N0YXRlU2V0dGVkKCkpIHRoaXMucnVuKCk7XHJcblx0XHRpZiAoIXRoaXMuZm9ybUVuYWJsZWQpXHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHR9LFxyXG5cclxuXHQvKipcclxuXHQgKiBJZiBzdGF0ZSB3YXMgZ2l2ZW4gYW55IHZhbHVlLiBcclxuXHQgKiBSZXR1cm4gJ2ZhbHNlJyBvbmx5IGlmIHVzZXIgc3VibWl0IGZvcm0gd2l0aG91dCBmb2N1cyB0aGUgJGZpZWxkXHJcblx0ICogQHJldHVybiB7Qm9vbGVhbn1cclxuXHQgKi9cclxuXHRpc1N0YXRlU2V0dGVkOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiAnc3RhdGUnIGluIHRoaXM7XHJcblx0fSxcclxuXHJcblx0LyoqXHJcblx0ICogRXhlY3V0ZSBwcmUtdmFsaWRhdGlvbiwgdmFsaWRhdGlvbiBhbmQgcG9zdC12YWxpZHRpb24gdGhpbmdzXHJcblx0ICovXHJcblx0cnVuOiBmdW5jdGlvbigpIHtcclxuXHRcdGlmICghdGhpcy5pc1ZhbHVlQ2hhbmdlZCgpKSByZXR1cm47XHJcblx0XHRpZiAodGhpcy5pc0hhc2hlZCgpKVxyXG5cdFx0XHRyZXR1cm4gdGhpcy5zZXRIYXNoZWRTdGF0ZSgpO1xyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0dGhpcy5zdGF0ZSA9IEVtYWlsVmFsaWRpdG9uLlNUQVRFUy5QRU5ESU5HO1xyXG5cdFx0dGhpcy52YWxpZGF0ZSh0aGlzLnZhbHVlKS5kb25lKGZ1bmN0aW9uKHJlc3VsdCkge1xyXG5cdFx0XHRFbWFpbFZhbGlkaXRvbi5zZXRIYXNoKHNlbGYudmFsdWUsIHJlc3VsdCk7XHJcblx0XHRcdHNlbGYuc2V0U3RhdGUocmVzdWx0KTtcclxuXHRcdH0pO1xyXG5cdH0sXHJcblxyXG5cdC8qKlxyXG5cdCAqIFNldCBoYXNoZWQgdmFsdWUgb2Ygc3RhdGVcclxuXHQgKi9cclxuXHRzZXRIYXNoZWRTdGF0ZTogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaGFzaGVkID0gRW1haWxWYWxpZGl0b24uZ2V0SGFzaCh0aGlzLnZhbHVlKTtcclxuXHRcdHRoaXMuc2V0U3RhdGUoaGFzaGVkKTtcclxuXHR9LFxyXG5cclxuXHQvKipcclxuXHQgKiBJZiB2YWxpZGF0aW9uIG9mIHZhbHVlZCB3YXMgaGFzaGVkXHJcblx0ICogQHJldHVybiB7Qm9vbGVhbn1cclxuXHQgKi9cclxuXHRpc0hhc2hlZDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLmhhc2ggJiYgRW1haWxWYWxpZGl0b24uaGFzSGFzaCh0aGlzLnZhbHVlKTtcclxuXHR9LFxyXG5cclxuXHRpc1ZhbHVlQ2hhbmdlZDogZnVuY3Rpb24oKSB7XHJcblx0XHR0aGlzLnZhbHVlID0gdGhpcy4kZmllbGQudmFsKCk7XHJcblx0XHRpZiAodGhpcy5wcmV2aW91c1ZhbHVlID09IHRoaXMudmFsdWUpIHJldHVybiBmYWxzZTtcclxuXHRcdHRoaXMucHJldmlvdXNWYWx1ZSA9IHRoaXMudmFsdWU7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9LFxyXG5cclxuXHQvKipcclxuXHQgKiBTZXQgc3RhdGVcclxuXHQgKiBAcGFyYW0ge2Jvb2xlYW58bnVsbHx1bmRlZmluZWR9IHN0YXRlIFxyXG5cdCAqL1xyXG5cdHNldFN0YXRlOiBmdW5jdGlvbihzdGF0ZSkge1xyXG5cdFx0aWYgKHN0YXRlID09PSBFbWFpbFZhbGlkaXRvbi5TVEFURVMuSU5WQUxJRCkge1xyXG5cdFx0XHR0aGlzLnNldEluVmFsaWQoKTtcclxuXHRcdH0gZWxzZSBpZiAoc3RhdGUgPT09IEVtYWlsVmFsaWRpdG9uLlNUQVRFUy5WQUxJRCB8fCBcclxuXHRcdFx0c3RhdGUgPT09IEVtYWlsVmFsaWRpdG9uLlNUQVRFUy5VTkRFRklORUQpXHJcblx0XHRcdHRoaXMuc2V0VmFsaWQoKTtcclxuXHRcdGVsc2UgaWYgKHN0YXRlID09IEVtYWlsVmFsaWRpdG9uLlNUQVRFUy5VTkRFRklORUQpXHJcblx0XHRcdHRoaXMucmVzZXQoKTtcclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRzdGF0ZSA9IEVtYWlsVmFsaWRpdG9uLlNUQVRFUy5VTkRFRklORUQ7XHJcblx0XHRcdHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdOb3QgYWxsb3dlZCB2YWx1ZSBvZiBzdGF0ZScpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdC8qKlxyXG5cdCAqIFJlc2V0IGZvcm0gYW5kIGZpZWxkIHRvIGRlZmF1bHQgdmFsdWUgYXMgdGhleSB3ZXJlIGJlZm9yZSBwbHVnaW4gaW5pdFxyXG5cdCAqL1xyXG5cdHJlc2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdHRoaXMuZm9ybUVuYWJsZWQgPSB0cnVlO1xyXG5cdFx0dGhpcy4kc3VibWl0LnJlbW92ZUNsYXNzKHRoaXMuZE5hbWUgKyAnU3VibWl0LS1kaXNhYmxlZCcpLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xyXG5cdFx0dGhpcy4kZmllbGRcclxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoaXMuZE5hbWUgKyAnLS12YWxpZCcpXHJcblx0XHRcdC5yZW1vdmVDbGFzcyh0aGlzLmROYW1lICsgJy0taW52YWxpZCcpO1xyXG5cdH0sXHJcblxyXG5cdC8qKlxyXG5cdCAqIENhbGxlZCB3aGVuIGVtYWlsIGlzIGludmFsaWQuXHJcblx0ICogRGlzYWJsZSBmb3JtLiBNYXJrIGZpZWxkIGFzIGludmFsaWRcclxuXHQgKi9cclxuXHRzZXRJblZhbGlkOiBmdW5jdGlvbigpIHtcclxuXHRcdHRoaXMuZm9ybUVuYWJsZWQgPSBmYWxzZTtcclxuXHRcdHRoaXMuJHN1Ym1pdC5hZGRDbGFzcyh0aGlzLmROYW1lICsgJ1N1Ym1pdC0tZGlzYWJsZWQnKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xyXG5cdFx0dGhpcy4kZmllbGRcclxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoaXMuZE5hbWUgKyAnLS12YWxpZCcpXHJcblx0XHRcdC5hZGRDbGFzcyh0aGlzLmROYW1lICsgJy0taW52YWxpZCcpO1xyXG5cdH0sXHJcblxyXG5cdC8qKlxyXG5cdCAqIENhbGxlZCB3aGVuIGVtYWlsIGlzIHZhbGlkLlxyXG5cdCAqIEVuYWJsZSBmb3JtLiBNYXJrIGZpZWxkIGFzIHZhbGlkXHJcblx0ICovXHJcblx0c2V0VmFsaWQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dGhpcy5mb3JtRW5hYmxlZCA9IHRydWU7XHJcblx0XHR0aGlzLiRzdWJtaXQucmVtb3ZlQ2xhc3ModGhpcy5kTmFtZSArICdTdWJtaXQtLWRpc2FibGVkJykucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XHJcblx0XHR0aGlzLiRmaWVsZC5yZW1vdmVDbGFzcyh0aGlzLmROYW1lICsgJy0taW52YWxpZCcpLmFkZENsYXNzKHRoaXMuZE5hbWUgKyAnLS12YWxpZCcpO1xyXG5cdH0sXHJcblxyXG5cdC8qKlxyXG5cdCAqIFZhbGlkYXRlIGVtYWlsXHJcblx0ICogQHBhcmFtICB7c3RyaW5nfSBlbWFpbCBFbWFpbCB0byB2YWxpZGF0ZVxyXG5cdCAqIEByZXR1cm4ge2pRdWVyeS5EZWZlcnJlZH0gRGVmZXJyZWQgaW5zdGFuY2UsIHdoaWNoIGlzIHJlc29sdmVkIHdpdGggYSBzdGF0ZVxyXG5cdCAqL1xyXG5cdHZhbGlkYXRlOiBmdW5jdGlvbihlbWFpbCkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IHRoaXMudmFsaWRhdGVSZWdFeHAoZW1haWwpO1xyXG5cdFx0aWYgKHJlc3VsdCAmJiB0aGlzLm9wdGlvbnMucmVtb3RlVmFsaWRhdGUpXHJcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbnMucmVtb3RlVmFsaWRhdGUoZW1haWwpO1xyXG5cdFx0dmFyIGRlZiA9ICQuRGVmZXJyZWQoKTtcclxuXHRcdGRlZi5yZXNvbHZlKHJlc3VsdCk7XHJcblx0XHRyZXR1cm4gZGVmO1xyXG5cdH0sXHJcblxyXG5cdC8qKlxyXG5cdCAqIFZhbGlkYXRlIGFuIGVtYWlsIHdpdGggcmVndWxhciBleHByZXNzaW9uXHJcblx0ICogQHBhcmFtICB7c3RyaW5nfSBlbWFpbCBFbWFpbCB0byB2YWxpZGF0ZVxyXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59ICAgICAgUmVzdWx0IG9mIHZhbGlkYXRpb25cclxuXHQgKi9cclxuXHR2YWxpZGF0ZVJlZ0V4cDogZnVuY3Rpb24oZW1haWwpIHtcclxuXHRcdHJldHVybiB0aGlzLm9wdGlvbnMudmFsaWRhdGlvblJlZy50ZXN0KGVtYWlsKTtcclxuXHR9LFxyXG5cclxuXHQvKipcclxuXHQgKiBTZXQgb3B0aW9ucywgZXh0ZW5kaW5nIGV4aXN0aW5nXHJcblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgTmV3IG9wdGlvbnNcclxuXHQgKi9cclxuXHRzZXRPcHRpb25zOiBmdW5jdGlvbihvcHRpb25zKSB7XHJcblx0XHR0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB0aGlzLm9wdGlvbnMsIEVtYWlsVmFsaWRpdG9uLm9wdGlvbnMsIG9wdGlvbnMpO1xyXG5cdFx0dGhpcy5vcHRpb25zLnRyaWdnZXJUeXBlID0gW10uY29uY2F0KHRoaXMub3B0aW9ucy50cmlnZ2VyVHlwZSk7XHJcblx0fSxcclxufTtcclxuXHJcbkVtYWlsVmFsaWRpdG9uLlNUQVRFUyA9IHtcclxuXHQvLyBTdGF0ZSBjYW4gbm90IGJlIGRldGVjdGVkLiBJdCBoYXBwZW5zIHdoZW4gI3JlbW90ZVZhbGlkYXRpb24gcHJvZHVjZXMgYW4gZXJyb3JcclxuXHRVTkRFRklORUQ6IHVuZGVmaW5lZCxcclxuXHQvLyBTdGF0ZSBpcyB2YWxpZFxyXG5cdFZBTElEOiB0cnVlLFxyXG5cdC8vIFN0YXRlIGlzIGludmFsaWRcclxuXHRJTlZBTElEOiBmYWxzZSxcclxuXHRQRU5ESU5HOiBudWxsXHJcbn07XHJcblxyXG4vKipcclxuICogSW5pdCBwbHVnaW4gb24gJGZpZWxkIHdpdGggb3B0aW9uc1xyXG4gKiBAcGFyYW0gIHtqUXVlcnl9ICRmaWVsZCAgRW1haWwgZmllbGRcclxuICogQHBhcmFtICB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uc1xyXG4gKiBAcmV0dXJuIHtFbWFpbFZhbGlkaXRvbl0gICBJbnN0YW5jZVxyXG4gKi9cclxuRW1haWxWYWxpZGl0b24uaW5pdEZpZWxkID0gZnVuY3Rpb24oJGZpZWxkLCBvcHRpb25zKSB7XHJcblx0dmFyIGluc3QgPSBuZXcgdGhpcztcclxuXHRpbnN0LiRmaWVsZCA9ICRmaWVsZDtcclxuXHRpbnN0LnNldE9wdGlvbnMob3B0aW9ucyk7XHJcblx0aW5zdC5pbml0KCk7XHJcblx0cmV0dXJuIGluc3Q7XHJcbn07XHJcblxyXG4vKipcclxuICogSW5pdCBwbHVnaW4gb24gZG9jdW1lbnQgbmFtZSAoY2xhc3MgbmFtZSkgd2l0aCBvcHRpb25zXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gZE5hbWUgICBcclxuICogQHBhcmFtICB7b2JqZWN0fSBbb3B0aW9uc10gXHJcbiAqL1xyXG5FbWFpbFZhbGlkaXRvbi5pbml0U2VsZWN0b3IgPSBmdW5jdGlvbihkTmFtZSwgb3B0aW9ucykge1xyXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cdG9wdGlvbnMuZE5hbWUgPSBkTmFtZTtcclxuXHQkKCcuJyArIGROYW1lKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGluc3QgPSBuZXcgRW1haWxWYWxpZGl0b247XHJcblx0XHRpbnN0LiRmaWVsZCA9ICQodGhpcyk7XHJcblx0XHRpbnN0LnNldE9wdGlvbnMob3B0aW9ucyk7XHJcblx0XHRpbnN0LmluaXQoKTtcclxuXHR9KTtcclxufTtcclxuXHJcbkVtYWlsVmFsaWRpdG9uLm9wdGlvbnMgPSB7XHJcblx0ZE5hbWU6ICdmZW1tJyxcclxuXHR2YWxpZGF0aW9uUmVnOiAvXigoW148PigpW1xcXVxcXFwuLDs6XFxzQFxcXCJdKyhcXC5bXjw+KClbXFxdXFxcXC4sOzpcXHNAXFxcIl0rKSopfChcXFwiLitcXFwiKSlAKChcXFtbMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFxdKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkL2ksXHJcblx0dHJpZ2dlclR5cGU6IFsnc3VibWl0JywgJ2ZvY3Vzb3V0Jy8qLCdrZXl1cCcqL10sXHJcblx0cmVtb3RlVmFsaWRhdGU6IGZhbHNlLFxyXG5cdC8vIFVzZWQgb25seSB3aGVuIGB0cmlnZ2VyVHlwZWAgY29udGFpbnMgJ2ZvY3Vzb3V0J1xyXG5cdGZvY3Vzb3V0RGVsYXk6IDQwMCxcclxuXHRoYXNoOiB0cnVlXHJcbn07XHJcbkVtYWlsVmFsaWRpdG9uLnNldE9wdGlvbnMgPSBmdW5jdGlvbihvcHRpb25zKSB7XHJcblx0dGhpcy5vcHRpb25zID0gJC5leHRlbmQodHJ1ZSwgdGhpcy5vcHRpb25zLCBvcHRpb25zKTtcclxufTtcclxuXHJcbkVtYWlsVmFsaWRpdG9uLmhhc2ggPSB7fTtcclxuRW1haWxWYWxpZGl0b24uZ2V0SGFzaCA9IGZ1bmN0aW9uKGtleSkge1xyXG5cdHJldHVybiB0aGlzLmhhc2hba2V5XTtcclxufTtcclxuRW1haWxWYWxpZGl0b24uc2V0SGFzaCA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcclxuXHR0aGlzLmhhc2hba2V5XSA9IHZhbHVlO1xyXG59O1xyXG5FbWFpbFZhbGlkaXRvbi5oYXNIYXNoID0gZnVuY3Rpb24oa2V5KSB7XHJcblx0cmV0dXJuIGtleSBpbiB0aGlzLmhhc2g7XHJcbn07XHJcbkVtYWlsVmFsaWRpdG9uLmNsZWFySGFzaCA9IGZ1bmN0aW9uKCkge1xyXG5cdHRoaXMuaGFzaCA9IHt9O1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBFbWFpbFZhbGlkaXRvbjtcclxuXHJcbmdsb2JhbC5sID0gZnVuY3Rpb24gKHgpIHtcclxuXHRjb25zb2xlLmxvZyh4KTtcclxufTsiXX0=
